@using oledid.SyntaxImprovement
@model string
@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@inject IWebHostEnvironment env

<div id="entrypoint"></div>

@{
	var isDevelopment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development" && configuration["UsePreBuiltClientScriptsInDev"]?.ToLowerInvariant() != "true";
	var viteServerUrl = (configuration["ViteServerUrl"] ?? "http://localhost:5173/").RemoveFromEnd("/");
	if (isDevelopment)
	{
		@* if dev *@
		<script type="module" src="@(viteServerUrl)/@@vite/client"></script>
		<script type="module" src="@GetDevUrl()"></script>
	}
	else
	{
		@* if production *@

		var manifestParser = await Core.Concepts.Vite.ViteManifestParser.FromFileAsync(System.IO.Path.Combine(env.WebRootPath, "./dist/.vite/manifest.json"));
		var scriptUrl = manifestParser.GetScript(Model);
		var styleUrls = manifestParser.GetStyles(Model);

		foreach (var style in styleUrls)
		{
			<link rel="stylesheet" href="/dist/@(style)?c=@(GetBuildTime())" />
		}

		if (!string.IsNullOrWhiteSpace(scriptUrl))
		{
			<script type="module" src="/dist/@(scriptUrl)?c=@(GetBuildTime())"></script>
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// https://vitejs.dev/guide/backend-integration.html

	string GetDevUrl()
	{
		// this points to the locally running vite server *@
		return $"{viteServerUrl}/{Model}";
	}

	string GetBuildTime()
	{
		var buildDateAttr = GetType().Assembly.GetCustomAttributes(typeof(Core.BuildDateAttribute), true).FirstOrDefault() as Core.BuildDateAttribute;
		var date = buildDateAttr != null ? buildDateAttr.DateTime : (DateTime?)null;
		return (date == null ? DateTime.Now : date).Value.ToString("yyyyMMddHHmmss");
	}
}
